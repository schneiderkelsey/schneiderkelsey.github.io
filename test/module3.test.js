"use strict"

var assert = require('assert');
var price = require('../logic/price');
var util = require('../logic/util');

describe('Calculate final price for a ticket', function(){
   it('should calculate the final price for a ticket depending on increase and reduction percents. @calculate_ticket_final_price', 
   function() {
      assert(price.calculateFinalPrice, "Have you created and exported a `price.calculateFinalPrice` function?");

      assert.equal(92.15, price.calculateFinalPrice(100, -5, -3), "Expected result: 92.15");
      assert.equal(97.85, price.calculateFinalPrice(100, -5, 3), "Expected result: 97.85");
      assert.equal(101.85, price.calculateFinalPrice(100, 5, -3), "Expected result: 101.85");
      assert.equal(108.15, price.calculateFinalPrice(100, 5, 3), "Expected result: 108.15");
})
});

describe('Test exceptions generated by wrong inputs', function() {
    it('should check exceptions are thrown. @check_exceptions_wrong_input', function() {
       assert(util.checkInput, "Have you created and exported a `util.checkInput` function?");
       assert.throws(function () { util.checkInput("") }, Error, "The input should not be empty");
       assert.throws(function () { util.checkInput("abc") }, Error, "The input should be a number");
    })
 });

 describe('Calculate default final price for a ticket', function() {
    it('should calculate the default final price for a ticket depending on passenger type, flight type and base price. @calculate_ticket_default_final_price', 
           function() {
              assert(price.calculateDefaultFinalPrice, "Have you created and exported a `price.calculateDefaultFinalPrice` function?");
 
              assert.equal(92.15, price.calculateDefaultFinalPrice(100, 'regular', 'economy'), "Expected result: 92.15");
              assert.equal(101.85, price.calculateDefaultFinalPrice(100, 'vip', 'economy'), "Expected result: 101.85");
              assert.equal(104.50, price.calculateDefaultFinalPrice(100, 'regular', 'business'), "Expected result: 104.50");
              assert.equal(115.50, price.calculateDefaultFinalPrice(100, 'vip', 'business'), "Expected result: 115.50");
    })
 });

 describe('Calculate total final price for a number of tickets', function() {
    it('should calculate the total final price for a number of tickets depending on passenger type, flight type and base price. @calculate_tickets_total_final_price', 
           function() {
              assert(price.calculateTotalFinalPrice, "Have you created and exported a `price.calculateTotalFinalPrice` function?");

              assert.equal(460.75, price.calculateTotalFinalPrice(5, 'regular', 'economy', 100), "Expected result: 460.75");
              assert.equal(407.40, price.calculateTotalFinalPrice(4, 'vip', 'economy', 100), "Expected result: 407.40");
              assert.equal(209, price.calculateTotalFinalPrice(2, 'regular', 'business', 100), "Expected result: 209");
              assert.equal(346.50, price.calculateTotalFinalPrice(3, 'vip', 'business', 100), "Expected result: 346.50");
    })
 });

 describe('Test total distance', function() {
    it('should check the total distance. @check_total_distance', function() {
       assert(util.calculateTotalDistance, "Have you created and exported a `util.calculateTotalDistance` function?");
       let totalDistance = util.calculateTotalDistance([1320, 574, 470, 633, 910, 780]);
       assert.equal(4687, totalDistance, "You must have a total distance of 4687");
 
       totalDistance = util.calculateTotalDistance([1320, 574, -470, 633, 910, -780]);
       assert.equal(3437, totalDistance, "You must have a total distance of 3437");
    })
 });

 describe('Test bonus', function() {
    it('should check the awarded bonus. @check_bonus', function() {
       assert(util.calculateBonusPoints, "Have you created and exported a `util.calculateBonusPoints` function?");
 
       let points = util.calculateBonusPoints([1320, 574, -470, 633, 910, -780], [1200, -70, 890, -1000, 720, 890], 10, 5);
       assert.equal(528.7, points, "You must have 528.7 points");
    })
 });