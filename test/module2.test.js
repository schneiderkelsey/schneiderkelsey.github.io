"use strict"

var assert = require('assert');
var flights = require('../logic/flights');
var passengers = require('../logic/passengers');
var util = require('../logic/util');


describe('Test flights number', function() {
   it('should calculate the number of flights. @calculate_flights', function() {
      assert(flights.calculateNumberOfFlights, "Have you created and exported a `flights.calculateNumberOfFlights` function?");
      assert.equal(15, flights.calculateNumberOfFlights(1500, 100), "You need 15 flights having capacity 100 to carry 1500 passengers");
      assert.equal(16, flights.calculateNumberOfFlights(1501, 100), "You need 16 flights having capacity 100 to carry 1500 passengers");
   })
});

describe('Test exceptions generated by flights number calculation', function() {
    it('should check exceptions are thrown. @check_exceptions', function() {
       assert(flights.calculateNumberOfFlights, "Have you created and exported a `flights.calculateNumberOfFlights` function?");
       assert.throws(function () { flights.calculateNumberOfFlights(1500.7, 10) }, Error, "The number of passengers must be a positive integer value");
       assert.throws(function () { flights.calculateNumberOfFlights(-1500, 10) }, Error, "The number of passengers must be a positive integer value");
       assert.throws(function () { flights.calculateNumberOfFlights(1500, 10.7) }, Error, "The capacity of the flight must be a positive integer value");
       assert.throws(function () { flights.calculateNumberOfFlights(1500, -10) }, Error, "The capacity of the flight must be a positive integer value");
    })
 });

 describe('Test aircraft revision', function() {
    it('should check the flights revision. @check_flights_revision', function() {
       assert(flights.checkAircraftRevision, "Have you created and exported a `flights.checkAircraftRevision` function?");
       assert.equal("The revision needs to be done within the next 3 months", flights.checkAircraftRevision(50000, [10000, 1200, 4500, 3500]), "The exact message must be: 'The revision should be done within the next 3 months'");
       assert.equal("The revision needs to be done within the next 2 months", flights.checkAircraftRevision(50000, [10000, 12000, 4500, 3500]), "The exact message must be: 'The revision should be done within the next 2 months'");
       assert.equal("The revision needs to be done within the next month", flights.checkAircraftRevision(50000, [10000, 12000, 4500, 3500, 10000]), "The exact message must be: 'The revision should be done within the next month'");
       assert.throws(function () {flights.checkAircraftRevision(50000, [10000, 12000, 8700, 9500, 10000])}, Error, "The maximum allowed flight distance should be exceeded");
    })
 });

 describe('Test flight capacity', function() {
    it('should check the flight capacity. @check_flight_capacity', function() {
       assert(passengers.checkFlightCapacity, "Have you created and exported a `passengers.checkFlightCapacity` function?");
 
       let passengersNumber = passengers.checkFlightCapacity(1000, [132, 57, 63, 91]);
       assert.equal(343, passengersNumber, "You must have 343 passengers");
       assert.throws(function () { passengers.checkFlightCapacity(100, [132, 57, 63, 91]) }, Error, "The capacity of the flight is exceeded");
    })
 });

 describe('Test seats distribution', function() {
    it('should distribute the seats by passenger type and seat type. @check_seats_distribution', function() {
       assert(passengers.distributeAllSeatsToAllPassengers, "Have you created and exported a `passengers.distributeAllSeatsToAllPassengers` function?");
 
       let distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 1200, 13, 18, 200);
       assert.equal(150, passengers.distributeAllSeatsToAllPassengers(150, 1200, 13, 18, 200).vipPassengersWithBusinessSeats, "You must distribute 150 VIP passengers to business seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 1200, 13, 18, 200).vipPassengersWithEconomySeats, "You must distribute 0 VIP passengers to economy seats");
       assert.equal(84, passengers.distributeAllSeatsToAllPassengers(150, 1200, 13, 18, 200).regularPassengersWithBusinessSeats, "You must distribute 84 regular passengers to business seats");
       assert.equal(1116, passengers.distributeAllSeatsToAllPassengers(150, 1200, 13, 18, 200).regularPassengersWithEconomySeats, "You must distribute 1116 regular passengers to economy seats");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 18, 200);
       assert.equal(18, passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 18, 200).vipPassengersWithBusinessSeats, "You must distribute 18 VIP passengers to business seats");
       assert.equal(132, passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 18, 200).vipPassengersWithEconomySeats, "You must distribute 132 VIP passengers to economy seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 18, 200).regularPassengersWithBusinessSeats, "You must distribute 0 passengers regular  to business seats");
       assert.equal(68, passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 18, 200).regularPassengersWithEconomySeats, "You must distribute 68 regular passengers to economy seats");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 1200, 2, 18, 200);
       assert.equal(36, passengers.distributeAllSeatsToAllPassengers(150, 1200, 2, 18, 200).vipPassengersWithBusinessSeats, "You must distribute 36 VIP passengers to business seats");
       assert.equal(114, passengers.distributeAllSeatsToAllPassengers(150, 1200, 2, 18, 200).vipPassengersWithEconomySeats, "You must distribute 114 VIP passengers to economy seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 1200, 2, 18, 200).regularPassengersWithBusinessSeats, "You must distribute 0 passengers regular  to business seats");
       assert.equal(286, passengers.distributeAllSeatsToAllPassengers(150, 1200, 2, 18, 200).regularPassengersWithEconomySeats, "You must distribute 286 regular passengers to economy seats");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 1, 100, 250);
       assert.equal(100, passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 100, 250).vipPassengersWithBusinessSeats, "You must distribute 100 VIP passengers to business seats");
       assert.equal(50, passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 100, 250).vipPassengersWithEconomySeats, "You must distribute 50 VIP passengers to economy seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 100, 250).regularPassengersWithBusinessSeats, "You must distribute 0 passengers regular  to business seats");
       assert.equal(200, passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 100, 250).regularPassengersWithEconomySeats, "You must distribute 200 regular passengers to economy seats");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 1, 150, 200);
       assert.equal(150, passengers.distributeAllSeatsToAllPassengers(150, 200, 1, 150, 200).vipPassengersWithBusinessSeats, "You must distribute 150 VIP passengers to business seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 200, 1, 150, 200).vipPassengersWithEconomySeats, "You must distribute 0 VIP passengers to economy seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 200, 1, 150, 200).regularPassengersWithBusinessSeats, "You must distribute 0 passengers regular  to business seats");
       assert.equal(200, passengers.distributeAllSeatsToAllPassengers(150, 200, 1, 150, 200).regularPassengersWithEconomySeats, "You must distribute 200 regular passengers to economy seats");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 125);
       assert.equal(100, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 125).vipPassengersWithBusinessSeats, "You must distribute 100 VIP passengers to business seats");
       assert.equal(50, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 125).vipPassengersWithEconomySeats, "You must distribute 50 VIP passengers to economy seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 125).regularPassengersWithBusinessSeats, "You must distribute 0 passengers regular  to business seats");
       assert.equal(200, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 125).regularPassengersWithEconomySeats, "You must distribute 200 regular passengers to economy seats");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 126);
       assert.equal(100, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 126).vipPassengersWithBusinessSeats, "You must distribute 100 VIP passengers to business seats");
       assert.equal(50, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 126).vipPassengersWithEconomySeats, "You must distribute 50 VIP passengers to economy seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 126).regularPassengersWithBusinessSeats, "You must distribute 0 passengers regular  to business seats");
       assert.equal(200, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 126).regularPassengersWithEconomySeats, "You must distribute 200 regular passengers to economy seats");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 124);
       assert.equal(100, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 124).vipPassengersWithBusinessSeats, "You must distribute 100 VIP passengers to business seats");
       assert.equal(50, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 124).vipPassengersWithEconomySeats, "You must distribute 50 VIP passengers to economy seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 124).regularPassengersWithBusinessSeats, "You must distribute 0 passengers regular  to business seats");
       assert.equal(198, passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 124).regularPassengersWithEconomySeats, "You must distribute 198 regular passengers to economy seats");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(15, 20, 2, 50, 124);
       assert.equal(15, passengers.distributeAllSeatsToAllPassengers(15, 200, 2, 50, 124).vipPassengersWithBusinessSeats, "You must distribute 15 VIP passengers to business seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(15, 200, 2, 50, 124).vipPassengersWithEconomySeats, "You must distribute 0 VIP passengers to economy seats");
       assert.equal(85, passengers.distributeAllSeatsToAllPassengers(15, 200, 2, 50, 124).regularPassengersWithBusinessSeats, "You must distribute 85 passengers regular  to business seats");
       assert.equal(115, passengers.distributeAllSeatsToAllPassengers(15, 200, 2, 50, 124).regularPassengersWithEconomySeats, "You must distribute 115 regular passengers to economy seats");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 20, 2, 50, 124);
       assert.equal(100, passengers.distributeAllSeatsToAllPassengers(150, 20, 2, 50, 124).vipPassengersWithBusinessSeats, "You must distribute 100 VIP passengers to business seats");
       assert.equal(50, passengers.distributeAllSeatsToAllPassengers(150, 20, 2, 50, 124).vipPassengersWithEconomySeats, "You must distribute 50 VIP passengers to economy seats");
       assert.equal(0, passengers.distributeAllSeatsToAllPassengers(150, 20, 2, 50, 124).regularPassengersWithBusinessSeats, "You must distribute 0 passengers regular  to business seats");
       assert.equal(20, passengers.distributeAllSeatsToAllPassengers(150, 20, 2, 50, 124).regularPassengersWithEconomySeats, "You must distribute 20 regular passengers to economy seats");
    })
 });

 describe('Test total seats distribution', function() {
    it('should check the number of total distributed seats. @check_total_seats_distribution', function() {
       assert(passengers.distributeAllSeatsToAllPassengers, "Have you created and exported a `passengers.distributeAllSeatsToAllPassengers` function?");
       assert(util.calculateTotalDistributedPassengers, "Have you created and exported a `util.calculateTotalDistributedPassengers` function?");
 
       let distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 1200, 13, 18, 200);
       let totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(1350, totalDistributedPassengers, "You must distribute a total of 1350 passengers");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 1200, 1, 18, 200);
       totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(218, totalDistributedPassengers, "You must distribute a total of 218 passengers");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 1200, 2, 18, 200);
       totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(436, totalDistributedPassengers, "You must distribute a total of 436 passengers");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 1, 100, 250);
       totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(350, totalDistributedPassengers, "You must distribute a total of 350 passengers");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 1, 150, 200);
       totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(350, totalDistributedPassengers, "You must distribute a total of 350 passengers");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 125);
       totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(350, totalDistributedPassengers, "You must distribute a total of 350 passengers");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 126);
       totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(350, totalDistributedPassengers, "You must distribute a total of 350 passengers");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 200, 2, 50, 124);
       totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(348, totalDistributedPassengers, "You must distribute a total of 348 passengers");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(15, 20, 2, 50, 124);
       totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(35, totalDistributedPassengers, "You must distribute a total of 35 passengers");
 
       distributedPassengers = passengers.distributeAllSeatsToAllPassengers(150, 20, 2, 50, 124);
       totalDistributedPassengers = util.calculateTotalDistributedPassengers(distributedPassengers);
       assert.equal(170, totalDistributedPassengers, "You must distribute a total of 170 passengers");
    })
 });

 describe('Test total number of passengers', function() {
    it('should check the total number of passengers. @check_total_passengers', function() {
       assert(util.calculateTotalNumberOfPassengers, "Have you created and exported a `util.calculateTotalNumberOfPassengers` function?");
       let totalDistributedPassengers = util.calculateTotalNumberOfPassengers([135, 270, 270, 270, 270, 135]);
       assert.equal(1350, totalDistributedPassengers, "You must have a total of 1350 passengers");
    })
 });